AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  RolesStackName:
    Type: String
    Description: Roles Cloud Formation Stack Name
    Default: roles
  CoreStackName:
    Type: String
    Description: Core Cloud Formation Stack Name
  ServiceStackName:
    Type: String
    Description: ECS Service Cloud Formation Stack Name
  LambdaKMS:
    Type: String
    Description: ARN of an AWS KMS key that Lambda uses to encrypt and decrypt environment variable values.

Resources:
  NotifierLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: osirocom-lambda-functions
        S3Key: pipelineNotifier.zip
      Description: Sends notifications from CodePipeline to Slack
      Environment:
        Variables:
          slackChannel: '#pipeline'
          kmsEncryptedHookUrl: 'AQICAHg7dtXrx+sEQYQUZylNnFCByO2H3Lblmq5jBUIogFj9VwFZ83MgBPiKy5o+1kJhrBRZAAAApzCBpAYJKoZIhvcNAQcGoIGWMIGTAgEAMIGNBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDDxIopEHeypgq2z5iAIBEIBgSH+d4/o0tUWoWKB4KNk4o7WgOHruOSjicGOyb4SflRQ+BGvTO4BVVRDxEcioVp9Twt2C2zyHGWEhJJMtbp9wU704XrBz8bt1ZR2ms4cV+/mIXoZbT8zOcpTyPsXOqmxU'
      FunctionName: pipelineNotifier
      Handler: index.handler
      KmsKeyArn: !Ref LambdaKMS
      Role:
        Fn::ImportValue:
          !Sub "${RolesStackName}-LambdaRoleArn"
      Runtime: nodejs6.10
      Tags:
        - Key: Name
          Value:
            Fn::ImportValue:
              !Sub "${CoreStackName}-Environment"

  MigrationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: osirocom-lambda-functions
        S3Key: dbMigrate.zip
      Description: Run database migration
      Environment:
        Variables:
          clusterName:
            Fn::ImportValue:
              !Sub "${CoreStackName}-Cluster"
          taskDefName:
            Fn::ImportValue:
              !Sub "${ServiceStackName}-ECSMigrationService"
      FunctionName: dbMigrate
      Handler: index.handler
      Role:
        Fn::ImportValue:
          !Sub "${RolesStackName}-LambdaRoleArn"
      Runtime: nodejs6.10
      Tags:
        - Key: Name
          Value:
            Fn::ImportValue:
              !Sub "${CoreStackName}-Environment"

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn:
        Fn::ImportValue: !Sub "${RolesStackName}-CoreCodePipelineRoleArn"
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Gathering
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration:
                RepositoryName: osirocom
                BranchName: master
              OutputArtifacts:
                - Name: CodeCommitApp
              RunOrder: 1
            - Name: Template
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: S3
              OutputArtifacts:
                - Name: CloudFormationServiceTemplate
              RunOrder: 1
              Configuration:
                S3Bucket: ecs-services-templates
                S3ObjectKey: osirocom.zip
        - Name: Building
          Actions:
            - Name: Test
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: osirocom
              InputArtifacts:
                - Name: CodeCommitApp
              OutputArtifacts:
                - Name: CodeBuildArtifact
              RunOrder: 1
        - Name: Deployment
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CREATE_UPDATE
                StackName: production-osirocom
                Capabilities: CAPABILITY_NAMED_IAM
                TemplateConfiguration: CloudFormationServiceTemplate::configuration.json
                TemplatePath: CloudFormationServiceTemplate::service.yaml
                RoleArn: arn:aws:iam::127726907293:role/CloudFormationRole
                ParameterOverrides: !Sub |
                  {
                    "Tag" : { "Fn::GetParam" : [ "CodeBuildArtifact", "build.json", "tag" ] }
                  }
              InputArtifacts:
                - Name: CodeBuildArtifact
                - Name: CloudFormationServiceTemplate
              RunOrder: 1
            - Name: Migration
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref MigrationLambda
              RunOrder: 2

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Monitor CodePipeline Progress by sending messages to Slack
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - "CodePipeline Action Execution State Change"
      Name: CodePipelineNotifier
      State: ENABLED
      Targets:
        -
          Arn: !GetAtt NotifierLambda.Arn
          Id: CloudWatchEventToLambda
          InputTransformer:
            InputPathsMap:
              pipeline: "$.detail.pipeline"
              type: "$.detail-type"
              stage: "$.detail.stage"
              action: "$.detail.action"
              startedAt: "$.time"
              state: "$.detail.state"
            InputTemplate: '"{ \"pipeline\":\"<pipeline>\", \"type\":\"<type>\", \"stage\":\"<stage>\", \"action\":\"<action>\", \"startedAt\":\"<startedAt>\", \"state\":\"<state>\" }"'

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref NotifierLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EventRule.Arn
