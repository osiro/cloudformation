AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  RolesStackName:
    Type: String
    Description: Roles Cloud Formation Stack Name
    Default: roles
  KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the KeyPair to use
  SpotPrice:
    Type: Number
    Description: Spot Price
    Default: 0.01
  Environment:
    Type: String
    Description: Environment
    Default: staging
    AllowedValues:
      - production
      - staging

Resources:
  # Users, Groups, Roles and Policies
  BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - Fn::ImportValue: !Sub '${RolesStackName}-BastionRole'

  ECSServiceInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - Fn::ImportValue: !Sub '${RolesStackName}-ECSServiceRole'

  # VPC and Security Groups
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref Environment

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref Environment

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SecurityGroupPublic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Public
      GroupDescription: Allow traffic from Internet to hosts
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'public', '-', !Ref Environment ] ]

  SecurityGroupBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Bastion
      GroupDescription: Allow traffic from Internet to Bastion
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/16
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'bastion-public', '-', !Ref Environment ] ]

  SecurityGroupPrivate:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Private
      GroupDescription: Allow traffic from Bastion to hosts
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 10.0.0.0/16
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !Ref SecurityGroupBastion
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'private', '-', !Ref Environment ] ]

  # Subnets: 2 public and 2 privates
  SubnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'public', '-', !Ref Environment, '-a' ] ]
      VpcId: !Ref VPC
  SubnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'public', '-', !Ref Environment, '-b' ] ]
      VpcId: !Ref VPC

  SubnetPrivateA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'private', '-', !Ref Environment, '-a' ] ]
      VpcId: !Ref VPC

  SubnetPrivateB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'private', '-', !Ref Environment, '-b' ] ]
      VpcId: !Ref VPC

  # Network Interfaces and ElasticIP
  ElasticIPBastion:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Route Table for public subnet
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'public', '-', !Ref Environment ] ]
      VpcId: !Ref VPC

  RoutePublic:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationPublicA:
    DependsOn: SubnetPublicA
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicA
      RouteTableId: !Ref RouteTablePublic

  RouteTableAssociationPublicB:
    DependsOn: SubnetPublicB
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublicB
      RouteTableId: !Ref RouteTablePublic

  # Instances for public subnet (Bastion)
  LaunchConfigBastion:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: VPC
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-8bfce8f2
      InstanceMonitoring: false
      InstanceType: t2.micro
      KeyName: !Ref KeyPair
      SecurityGroups:
        - !Ref SecurityGroupBastion
      IamInstanceProfile: !Ref BastionInstanceProfile
      UserData:
        Fn::Base64:
          Fn::Join: ["",[
            "#!/bin/bash\n\n",

            "sudo yum update -y\n",

            "aws configure set default.region ", !Ref 'AWS::Region', "\n",

            "INSTANCEID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)\n",
            "aws ec2 modify-instance-attribute --instance-id $INSTANCEID --source-dest-check '{\"Value\": false}'\n",

            "ALLOCATIONID=", !GetAtt ElasticIPBastion.AllocationId, "\n",
            "aws ec2 associate-address --instance-id $INSTANCEID --allocation-id $ALLOCATIONID --allow-reassociation\n",

            "ROUTETABLEID=$(aws ec2 describe-route-tables  --filters 'Name=tag:Name,Values=", !Join [ '', [ 'private', '-', !Ref Environment ] ], "' --query 'RouteTables[0].RouteTableId' --output text)\n",
            "aws ec2 delete-route --route-table-id $ROUTETABLEID --destination-cidr-block 0.0.0.0/0\n",
            "aws ec2 create-route --route-table-id $ROUTETABLEID --destination-cidr-block 0.0.0.0/0 --instance-id $INSTANCEID\n"
          ]]

  AutoScalingGroupBastion:
    DependsOn:
      # Bastion UserData needs to ensure private routes exist before provisioning
      - RouteTableAssociationPrivateA
      - RouteTableAssociationPrivateB
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB
      DesiredCapacity: 1
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref LaunchConfigBastion
      MaxSize: 1
      MinSize: 1
      Tags:
        - ResourceType: auto-scaling-group
          ResourceId: !Join [ '', [ 'bastion', '-', !Ref Environment ] ]
          PropagateAtLaunch: true
          Key: Name
          Value: !Join [ '', [ 'bastion', '-', !Ref Environment ] ]

  # Route Table for 2 private subnets
  # NOTE: Routes for private subnets are created during the provisioning of bastion via UserData
  RouteTablePrivate:
    DependsOn: VPC
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'private', '-', !Ref Environment ] ]
      VpcId: !Ref VPC

  RouteTableAssociationPrivateA:
    DependsOn: SubnetPrivateA
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateA
      RouteTableId: !Ref RouteTablePrivate

  RouteTableAssociationPrivateB:
    DependsOn: SubnetPrivateB
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivateB
      RouteTableId: !Ref RouteTablePrivate

  # Instances for private subnets (2 instances for ECS Cluster)
  LaunchConfigCluster:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: VPC
    Properties:
      AssociatePublicIpAddress: false
      ImageId: ami-1d668865
      InstanceMonitoring: true
      IamInstanceProfile: !Ref ECSServiceInstanceProfile
      InstanceType: m3.medium
      KeyName: !Ref KeyPair
      SecurityGroups:
        - !Ref SecurityGroupPrivate
      SpotPrice: !Ref SpotPrice
      UserData:
        Fn::Base64:
          Fn::Join: ["",[
            "#!/usr/bin/env bash\n",
            "sudo yum update -y\n",
            "echo ECS_CLUSTER=", !Join [ '', [ 'micro-services-', !Ref Environment ] ], " >> /etc/ecs/ecs.config"
          ]]

  AutoScalingGroupCluster:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref SubnetPrivateA
        - !Ref SubnetPrivateB
      DesiredCapacity: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      LaunchConfigurationName: !Ref LaunchConfigCluster
      MaxSize: 15
      MinSize: 2
      Tags:
        - ResourceType: auto-scaling-group
          ResourceId: !Join [ '', [ 'cluster', '-', !Ref Environment ] ]
          PropagateAtLaunch: true
          Key: Name
          Value: !Join [ '', [ 'cluster', '-', !Ref Environment ] ]

  UpScalingCluster:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      Cooldown: 300
      AutoScalingGroupName: !Ref AutoScalingGroupCluster
      ScalingAdjustment: 3

  DownScalingCluster:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      PolicyType: SimpleScaling
      Cooldown: 600
      AutoScalingGroupName: !Ref AutoScalingGroupCluster
      ScalingAdjustment: -1

  AlarmCPUReservationHigh:
    DependsOn:
      - AutoScalingGroupCluster
      - UpScalingCluster
      - Cluster
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref UpScalingCluster
      AlarmDescription: !Join [ '', [ 'High CPU Reservation for Cluster micro-services-', !Ref Environment ] ]
      AlarmName: !Join [ '', [ 'high-cpu-reservation-micro-services-', !Ref Environment ] ]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
      EvaluationPeriods: 1
      MetricName: CPUReservation
      Namespace: AWS/ECS
      Period: 300
      Statistic: Average
      Threshold: 60
      TreatMissingData: breaching

  AlarmCPUReservationLow:
    DependsOn:
      - AutoScalingGroupCluster
      - DownScalingCluster
      - Cluster
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref DownScalingCluster
      AlarmDescription: !Join [ '', [ 'Low CPU Reservation for Cluster micro-services-', !Ref Environment ] ]
      AlarmName: !Join [ '', [ 'low-cpu-reservation-micro-services-', !Ref Environment ] ]
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
      EvaluationPeriods: 1
      MetricName: CPUReservation
      Namespace: AWS/ECS
      Period: 300
      Statistic: Average
      Threshold: 30
      TreatMissingData: notBreaching

  # ECS Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join [ '', [ 'micro-services-', !Ref Environment ] ]

  # Application Load Balancer
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref Environment
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroupPublic
      Subnets:
        - !Ref SubnetPublicA
        - !Ref SubnetPublicB

Outputs:
  CoreVPC:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name:
        !Sub "${AWS::StackName}-VPC"

  CoreEnvironment:
    Description: Environment
    Value: !Ref Environment
    Export:
      Name:
        !Sub "${AWS::StackName}-Environment"

  ECSClusterName:
    Description: Name of created cluster
    Value: !Ref Cluster
    Export:
      Name:
        !Sub "${AWS::StackName}-Cluster"

  CoreALB:
    Description: ALB
    Value: !Ref ALB
    Export:
      Name:
        !Sub "${AWS::StackName}-ALB"
