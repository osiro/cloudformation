AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  CoreStackName:
    Type: String
    Description: Micro Services Cloud Formation Stack Name
    Default: production-core
    AllowedValues:
      - production-core
      - staging-core
  RolesStackName:
    Type: String
    Description: Roles Cloud Formation Stack Name
    Default: roles
  Tag:
    Type: String
    Description: The image tag to use for a container, which is passed directly to the Docker daemon
    Default: latest
  ApplicationName:
    Type: String
    Description: An name that will be prefixed to resource names.
  ApplicationType:
    Type: String
    Description: "An name that will be suffixed to resource names. E.G: web, processing, scheduling, etc."
    Default: web
    MaxLength: 5
  CertificateArn:
    Type: String
    Description: Certificate that you can use with AWS services to enable secure connections.
  ContainerCommand:
    Type: CommaDelimitedList
    Description: "Command to start the Docker container. E.G: eye,l,service.eye,-f"
    Default: "eye,l,service.eye,-f"
  MicroServicePath:
    Type: String
  CloudFrontOriginAccessId:
    Type: String
    Description: " The account or user who is allowed access to the actions and resources in the statement"
  CloudfrontCertificateArn:
    Type: String
    Description: ARN of an AWS Certificate Manager (ACM) certificate
  LambdaKMS:
    Type: String
    Description: ARN of an AWS KMS key that Lambda uses to encrypt and decrypt environment variable values.

Resources:

  NotifierLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: osirocom-lambda-functions
        S3Key: slackNotifier.zip
      Description: Sends notifications to Slack
      Environment:
        Variables:
          slackChannel: '#general'
          kmsEncryptedHookUrl: 'AQICAHg7dtXrx+sEQYQUZylNnFCByO2H3Lblmq5jBUIogFj9VwFZ83MgBPiKy5o+1kJhrBRZAAAApzCBpAYJKoZIhvcNAQcGoIGWMIGTAgEAMIGNBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDDxIopEHeypgq2z5iAIBEIBgSH+d4/o0tUWoWKB4KNk4o7WgOHruOSjicGOyb4SflRQ+BGvTO4BVVRDxEcioVp9Twt2C2zyHGWEhJJMtbp9wU704XrBz8bt1ZR2ms4cV+/mIXoZbT8zOcpTyPsXOqmxU'
      FunctionName: slackNotifier
      Handler: index.handler
      KmsKeyArn: !Ref LambdaKMS
      Role:
        Fn::ImportValue:
          !Sub "${RolesStackName}-LambdaRoleArn"
      Runtime: nodejs4.3
      Tags:
        - Key: Name
          Value:
            Fn::ImportValue:
              !Sub "${CoreStackName}-Environment"

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Operations Notifier
      TopicName: operations-notifier

  NotificationSubscriptions:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt NotifierLambda.Arn
      Protocol: lambda
      TopicArn: !Ref NotificationTopic

  NotifierLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref NotificationTopic
      FunctionName: !GetAtt NotifierLambda.Arn

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '301'
      Name:
        Fn::Join: [ '', [ !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Sub "${CoreStackName}-VPC"

  ALBHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn:
        Fn::ImportValue:
          !Sub "${CoreStackName}-ALB"
      Port: 80
      Protocol: HTTP

  ALBHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn:
        Fn::ImportValue:
          !Sub "${CoreStackName}-ALB"
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01

  HttpListenerRule:
    DependsOn: ALBHttpListener
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      Conditions:
      - Field: path-pattern
        Values:
          - !Ref MicroServicePath
      ListenerArn: !Ref ALBHttpListener
      Priority: 1

  HttpsListenerRule:
    DependsOn: ALBHttpsListener
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      Conditions:
      - Field: path-pattern
        Values:
          - !Ref MicroServicePath
      ListenerArn: !Ref ALBHttpsListener
      Priority: 1

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Join: [ '', [ !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      NetworkMode: bridge
      ContainerDefinitions:
        - Name:
            Fn::Join: [ '', [ !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
          Cpu: 128 # For reference, a m3.medium provides 1024 CPU units. Therefore it is able to host a max of 8 containers of 128 CPU units
          Command: !Ref ContainerCommand
          Environment:
            - Name: RAILS_ENV
              Value:
                Fn::ImportValue: !Sub '${CoreStackName}-Environment'
          Essential: true
          Image: !Join [ '', [ '127726907293.dkr.ecr.us-west-2.amazonaws.com/osirocom:', !Ref Tag ] ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::Join: [ '', [ 'micro-services-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Join [ '', [ !Ref ApplicationName, '-', !Ref ApplicationType ] ]
          Memory: 470 # For reference, a m3.medium provides 3765 MB. Therefore it is able to host a max of 8 containers of 470MB
          PortMappings:
            - ContainerPort: 80
              HostPort: 0 # Dynamic
              Protocol: tcp
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Sub "${CoreStackName}-Cluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      LoadBalancers:
        - ContainerName:
            Fn::Join: [ '', [ !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      PlacementStrategies:
        - Type: spread
          Field: attribute:ecs.availability-zone
      Role:
        Fn::ImportValue: !Sub "${RolesStackName}-ECSServiceRole"
      ServiceName:
          Fn::Join: [ '', [ !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      TaskDefinition: !Ref TaskDefinition

  TaskDefinitionMigration:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family:
        Fn::Join: [ '', [ !Ref ApplicationName, '-migration-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      NetworkMode: bridge
      ContainerDefinitions:
        - Name:
            Fn::Join: [ '', [ !Ref ApplicationName, '-migration-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
          Cpu: 128 # For reference, a m3.medium provides 1024 CPU units. Therefore it is able to host a max of 8 containers of 128 CPU units
          Command:
            - 'rake'
            - 'db:migrate'
            - '-t'
            - '-v'
          Environment:
            - Name: RAILS_ENV
              Value:
                Fn::ImportValue: !Sub '${CoreStackName}-Environment'
          Essential: true
          Image: !Join [ '', [ '127726907293.dkr.ecr.us-west-2.amazonaws.com/osirocom:', !Ref Tag ] ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Fn::Join: [ '', [ 'micro-services-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Join [ '', [ !Ref ApplicationName, '-', !Ref ApplicationType ] ]
          Memory: 470 # For reference, a m3.medium provides 3765 MB. Therefore it is able to host a max of 8 containers of 470MB

  ServiceMigration:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue:
          !Sub "${CoreStackName}-Cluster"
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 0
      PlacementStrategies:
        - Type: spread
          Field: attribute:ecs.availability-zone
      ServiceName:
          Fn::Join: [ '', [ !Ref ApplicationName, '-migration-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      TaskDefinition: !Ref TaskDefinitionMigration

  ScalableTarget:
    DependsOn: Service
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 32
      MinCapacity: 1
      ResourceId:
        Fn::Join: [ '', [ 'service/', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Cluster' }, '/', !GetAtt Service.Name ] ]
      RoleARN:
        Fn::ImportValue: !Sub "${RolesStackName}-ECSServiceRoleArn"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join [ '', [ 'scale-out-web-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 3

  ScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join [ '', [ 'scale-in-web-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      PolicyType: StepScaling
      ScalingTargetId: !Ref ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 120
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: -20
            ScalingAdjustment: -1

  AlarmCPUHigh:
    DependsOn: Service
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleOutPolicy
      AlarmDescription:
        Fn::Join: [ '', [ 'High CPU Utilisation for', !Ref ApplicationName, ' ', !Ref ApplicationType, ' - ', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      AlarmName:
        Fn::Join: [ '', [ 'high-cpu-utilisation-', !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ClusterName
          Value:
            Fn::ImportValue:
              Fn::Sub: '${CoreStackName}-Cluster'
        - Name: ServiceName
          Value: !GetAtt Service.Name
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 180
      Statistic: Average
      Threshold: 60
      TreatMissingData: breaching

  AlarmCPULow:
    DependsOn: Service
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleInPolicy
      AlarmDescription:
        Fn::Join: [ '', [ 'Low CPU Utilisation for', !Ref ApplicationName, ' ', !Ref ApplicationType, ' - ', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      AlarmName:
        Fn::Join: [ '', [ 'low-cpu-utilisation-', !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      ComparisonOperator: LessThanOrEqualToThreshold
      Dimensions:
        - Name: ClusterName
          Value:
            Fn::ImportValue:
              Fn::Sub: '${CoreStackName}-Cluster'
        - Name: ServiceName
          Value: !GetAtt Service.Name
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 180
      Statistic: Average
      Threshold: 30
      TreatMissingData: notBreaching

  CloudfrontS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join: [ '', [ !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ['*']
            AllowedMethods: [GET]
            MaxAge: '3000'
            AllowedHeaders: ['Authorization']
            Id: defaultCORSRule

  CloudfrontS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudfrontS3Bucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              Fn::Join: [ '', [ 'arn:aws:s3:::', !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' }, '/*' ] ]
            Principal:
              AWS:
                Fn::Join: [ '', [ 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ', !Ref CloudFrontOriginAccessId ] ]

  Cloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - cdn.osiro.me
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          MaxTTL: 31536000
          MinTTL: 0
          SmoothStreaming: false
          TargetOriginId:
            Fn::Join: [ '', [ 'S3-', !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName:
              Fn::Join: [ '', [ !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' }, '.s3.amazonaws.com' ] ]
            Id:
              Fn::Join: [ '', [ 'S3-', !Ref ApplicationName, '-', !Ref ApplicationType, '-', 'Fn::ImportValue': { 'Fn::Sub': '${CoreStackName}-Environment' } ] ]
            S3OriginConfig:
              OriginAccessIdentity:
                Fn::Join: [ '', [ 'origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessId ] ]
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref CloudfrontCertificateArn
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only

Outputs:
  ApplicationTargetGroup:
    Description: Task Definition
    Value: !Ref TargetGroup
    Export:
      Name:
        !Sub "${AWS::StackName}-TargetGroup"
  ApplicationALBHttpListener:
    Description: ALB HTTP Listener
    Value: !Ref ALBHttpListener
    Export:
      Name:
        !Sub "${AWS::StackName}-ALBHttpListener"
  ApplicationALBHttpsListener:
    Description: ALB HTTPS Listener
    Value: !Ref ALBHttpsListener
    Export:
      Name:
        !Sub "${AWS::StackName}-ALBHttpsListener"
  ApplicationHttpListenerRule:
    Description: HTTP Listener Rule
    Value: !Ref HttpListenerRule
    Export:
      Name:
        !Sub "${AWS::StackName}-HttpListenerRule"
  ApplicationHttpsListenerRule:
    Description: HTTP Listener Rule
    Value: !Ref HttpsListenerRule
    Export:
      Name:
        !Sub "${AWS::StackName}-HttpsListenerRule"
  ApplicationService:
    Description: Name of Web ECS service
    Value: !GetAtt Service.Name
    Export:
      Name:
        !Sub "${AWS::StackName}-ECSService"
  ApplicationTaskDefinition:
    Description: Task Definition
    Value: !Ref TaskDefinition
    Export:
      Name:
        !Sub "${AWS::StackName}-ECSTaskDefinition"
  ApplicationServiceMigration:
    Description: Name of Migration ECS service
    Value: !GetAtt ServiceMigration.Name
    Export:
      Name:
        !Sub "${AWS::StackName}-ECSMigrationService"
  ApplicationTaskDefinitionMigration:
    Description: Task Definition Migration
    Value: !Ref TaskDefinitionMigration
    Export:
      Name:
        !Sub "${AWS::StackName}-ECSTaskDefinitionMigration"
  ApplicationCloudfront:
    Description: Service Cloudfront
    Value: !Ref Cloudfront
    Export:
      Name:
        !Sub "${AWS::StackName}-Cloudfront"
